"use strict";(self.webpackChunktse_dev_api=self.webpackChunktse_dev_api||[]).push([[4724],{9669:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>r,toc:()=>l});var s=n(4848),o=n(8453),i=n(1470),u=n(9365);const a={sidebar_position:3,title:"Invoice totals calculation",slug:"invoice-totals",description:"Discover how to calculate the totals",tags:["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},c=void 0,r={id:"scenario/invoice-totals",title:"Invoice totals calculation",description:"Discover how to calculate the totals",source:"@site/docs/scenario/invoice-totals.mdx",sourceDirName:"scenario",slug:"/scenario/invoice-totals",permalink:"/docs/scenario/invoice-totals",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scenario/invoice-totals.mdx",tags:[{inline:!0,label:"guides",permalink:"/docs/tags/guides"},{inline:!0,label:"invoice",permalink:"/docs/tags/invoice"},{inline:!0,label:"invoice creation",permalink:"/docs/tags/invoice-creation"},{inline:!0,label:"issued documents",permalink:"/docs/tags/issued-documents"},{inline:!0,label:"payments",permalink:"/docs/tags/payments"},{inline:!0,label:"items",permalink:"/docs/tags/items"},{inline:!0,label:"totals",permalink:"/docs/tags/totals"},{inline:!0,label:"sdk",permalink:"/docs/tags/sdk"},{inline:!0,label:"code example",permalink:"/docs/tags/code-example"},{inline:!0,label:"c#",permalink:"/docs/tags/c"},{inline:!0,label:"java",permalink:"/docs/tags/java"},{inline:!0,label:"javascript",permalink:"/docs/tags/javascript"},{inline:!0,label:"php",permalink:"/docs/tags/php"},{inline:!0,label:"python",permalink:"/docs/tags/python"},{inline:!0,label:"ruby",permalink:"/docs/tags/ruby"},{inline:!0,label:"typescript",permalink:"/docs/tags/typescript"},{inline:!0,label:"zapier",permalink:"/docs/tags/zapier"}],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Invoice totals calculation",slug:"invoice-totals",description:"Discover how to calculate the totals",tags:["guides","invoice","invoice creation","issued documents","payments","items","totals","sdk","code example","c#","java","javascript","php","python","ruby","typescript","zapier"]},sidebar:"tutorialSidebar",previous:{title:"Client creation",permalink:"/docs/scenario/client-creation"},next:{title:"E-Invoice management",permalink:"/docs/scenario/e-invoice-management"}},d={},l=[{value:"\ud83d\udc75\xa0 Old or new?",id:"older_woman-old-or-new",level:2},{value:"\ud83c\udf1f\xa0 New invoice totals",id:"star2-new-invoice-totals",level:3},{value:"\ud83d\udcdc\xa0 Existing invoice totals",id:"scroll-existing-invoice-totals",level:3},{value:"\ud83c\udfa9\xa0 The magic field",id:"tophat-the-magic-field",level:2}];function m(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["If you are setting the payments list of your invoice you must know the ",(0,s.jsx)(t.strong,{children:"total amount of your items list"}),". Luckily for you, you don't have to take the calculator out of your drawer, we got you covered with a specific set of methods to suit your needs, so you won't be seeing the ",(0,s.jsx)(t.em,{children:"Il totale dei pagamenti non corrisponde al totale da pagare"})," error anymore."]}),"\n",(0,s.jsx)(t.admonition,{title:"Beware of roundings!",type:"warning",children:(0,s.jsx)(t.p,{children:"If you use numbers with more than 2 decimal digits when specifying the amounts in the items list and payments list they will automatically be rounded to 2 digits before doing any calculation, so if you do not take this into consideration you probably will get the 'Il totale dei pagamenti non corrisponde al totale da pagare' error."})}),"\n",(0,s.jsx)(t.admonition,{title:"Retrieve your Company ID!",type:"tip",children:(0,s.jsxs)(t.p,{children:["In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way.\nCheck the ",(0,s.jsx)(t.a,{href:"/basics/company-scoped-methods.mdx",children:"Company-scoped Methods"})," page for more info."]})}),"\n",(0,s.jsxs)(t.admonition,{title:"Are you using Zapier?",type:"info",children:[(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.a,{href:"/docs/quickstarts/zapier-quickstart.md",children:"Zapier Actions"})," provide all the fields offered by the APIs, but it does not mean you need to compile all of them!"]}),(0,s.jsx)(t.p,{children:"To follow this guide, you will be required to search the fields used in our example on the Zapier page and insert the related values."}),(0,s.jsxs)(t.p,{children:['The code of the fields will follow the JSON structure: for example, the "type" field is included in the "data" object, so the Zapier code will be "data.type". You can use the ',(0,s.jsx)(t.em,{children:"CRTL + F"})," command to search the field's code faster ","\ud83d\ude09"]}),(0,s.jsx)(t.p,{children:"In this example, we'll insert the values directly, but please remember that Zapier was built to let you select the workflow's previous steps' outputs as input in the Action, for example selecting the values returned by a trigger!"})]}),"\n",(0,s.jsxs)(t.h2,{id:"older_woman-old-or-new",children:["\ud83d\udc75","\xa0 Old or new?"]}),"\n",(0,s.jsx)(t.p,{children:"We got methods for all the cases you would possibly think of, either you are creating a new invoice or editing an old one we have a specific call."}),"\n",(0,s.jsx)(t.p,{children:"The two methods are:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/api-reference#post-/c/-company_id-/issued_documents/totals",children:"Get New Issued Document Totals"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/api-reference#post-/c/-company_id-/issued_documents/-document_id-/totals",children:"Get Existing Issued Document Totals"})}),"\n"]}),"\n",(0,s.jsx)(t.admonition,{title:"Look out!",type:"info",children:(0,s.jsxs)(t.p,{children:["Invoking these methods will ",(0,s.jsx)(t.strong,{children:"not"})," create or edit your invoice, it will only show you a preview of the totals. You still need to use the appropriate methods to apply the modifications."]})}),"\n",(0,s.jsxs)(t.h3,{id:"star2-new-invoice-totals",children:["\ud83c\udf1f","\xa0 New invoice totals"]}),"\n",(0,s.jsxs)(t.p,{children:["You can invoke the ",(0,s.jsx)(t.a,{href:"/api-reference#post-/c/-company_id-/issued_documents/totals",children:"Get New Issued Document Totals"})," method if you are creating a new invoice and want to know the totals after you added the items list to your invoice body: the response will contain all the info you need to finalize your invoice creation."]}),"\n",(0,s.jsx)(t.p,{children:"Here you can find an example request and response."}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(u.A,{value:"request",label:"Request",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:'POST /c/2/issued_document/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    "data": {\n        "entity": {\n            "name": "test"\n        },\n        "type": "invoice",\n        "items_list": [\n            {\n                "vat": {\n                    "id": 1\n                },\n                "name": "prod1",\n                "net_price": 35,\n                "qty": 1\n            },\n            {\n                "vat": {\n                    "id": 1\n                },\n                "name": "prod2",\n                "net_price": 39,\n                "qty": 1\n            }\n        ]\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"response",label:"Response",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "data": {\n    "amount_net": 74,\n    "amount_global_cassa_taxable": 74,\n    "taxable_amount": 74,\n    "vat_list": {\n      "21": {\n        "amount_net": 74,\n        "amount_vat": 15.54\n      }\n    },\n    "amount_vat": 15.54,\n    "amount_gross": 89.54,\n    "amount_enasarco_taxable": 0,\n    "amount_due": 89.54,\n    "amount_due_discount": null,\n    "payments_sum": 0\n  }\n}\n'})})})]}),"\n",(0,s.jsx)(t.p,{children:"And here there are the examples to make this request with our SDKs:"}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(u.A,{value:"cs",label:"C#",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = "YOUR_ACCESS_TOKEN";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                type: IssuedDocumentType.Invoice,\n                entity: new Entity(\n                    name: "test"\n                ),\n                itemsList: new List < IssuedDocumentItemsListItem > {\n                    new IssuedDocumentItemsListItem(\n                        name: "prod1",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: "prod2",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get new issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n            try {\n                GetNewIssuedDocumentTotalsResponse result = apiInstance.GetNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine("Exception when calling IssuedDocumentsApi.GetNewIssuedDocumentTotals: " + e.Message);\n                Console.WriteLine("Status Code: " + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"go",label:"Go",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// NOTE: this is a complete request, but please customize it!!!\n// In the next step we\'ll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n\t"context"\n\t"encoding/json"\n\t"fmt"\n\t"os"\n\n\tfattureincloudapi "github.com/fattureincloud/fattureincloud-go-sdk/v2/api"\n\tfattureincloud "github.com/fattureincloud/fattureincloud-go-sdk/v2/model"\n)\n\nfunc main() {\n\t//set your access token\n\tauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, "YOUR_ACCESS_TOKEN")\n\tconfiguration := fattureincloudapi.NewConfiguration()\n\tapiClient := fattureincloudapi.NewAPIClient(configuration)\n\n\t//set your company id\n\tcompanyId := int32(12345)\n\n\t//set your invoice info\n\tinvoice := *fattureincloud.NewIssuedDocument().\n\t\tSetEntity(*fattureincloud.NewEntity().\n\t\t\tSetId(1)).\n\t\tSetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n\t\tSetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n\t\t\t*fattureincloud.NewIssuedDocumentItemsListItem().\n\t\t\t\tSetName("prod1").\n\t\t\t\tSetNetPrice(35).\n\t\t\t\tSetQty(1).\n\t\t\t\tSetVat(*fattureincloud.NewVatType().SetId(0)),\n\t\t\t*fattureincloud.NewIssuedDocumentItemsListItem().\n\t\t\t\tSetName("prod2").\n\t\t\t\tSetNetPrice(39).\n\t\t\t\tSetQty(1).\n\t\t\t\tSetVat(*fattureincloud.NewVatType().SetId(0)),\n\t\t})\n\n\t// Here we put our invoice in the request object\n\tgetNewIssuedDocumentTotalsRequest := *fattureincloud.NewGetNewIssuedDocumentTotalsRequest().SetData(invoice)\n\n\t// Now we are all set for the final call\n\t// Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getnewissueddocumenttotals\n    resp, r, err := apiClient.IssuedDocumentsAPI.GetNewIssuedDocumentTotals(auth, companyId).GetNewIssuedDocumentTotalsRequest(getNewIssuedDocumentTotalsRequest).Execute()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, "Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n", err)\n        fmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n    }\n\tjson.NewEncoder(os.Stdout).Encode(resp)\n\n}\n'})})}),(0,s.jsx)(u.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication("OAuth2AuthenticationCodeFlow");\n        OAuth2AuthenticationCodeFlow.setAccessToken("YOUR ACCESS TOKEN");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .type(IssuedDocumentType.INVOICE)\n                .entity(\n                    new Entity()\n                        .name("test")\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name("prod1")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name("prod2")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetNewIssuedDocumentTotalsRequest getNewIssuedDocumentTotalsRequest = new GetNewIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get new issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\n        try {\n            GetNewIssuedDocumentTotalsResponse result = apiInstance.getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println("Exception when calling IssuedDocumentsApi#getNewIssuedDocumentTotals");\n            System.err.println("Status code: " + e.getCode());\n            System.err.println("Reason: " + e.getResponseBody());\n            System.err.println("Response headers: " + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'var fattureInCloudSdk = require("@fattureincloud/fattureincloud-js-sdk");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications["OAuth2AuthenticationCodeFlow"];\nOAuth2AuthenticationCodeFlow.accessToken = "YOUR_ACCESS_TOKEN";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n//set your company id\nlet companyId = 12345;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.type = new fattureInCloudSdk.IssuedDocumentType().invoice;\ninvoice.entity = {\n  name: "test",\n};\ninvoice.items_list = [\n  {\n    name: "prod1",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: "prod2",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetNewIssuedDocumentTotalsRequest();\ngetNewIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getNewIssuedDocumentTotalsRequest: getNewIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.getNewIssuedDocumentTotals(companyId, opts).then(\n  (result) => {\n    console.log(\n      "API called successfully. Returned result: " + JSON.stringify(result)\n    );\n  },\n  (error) => {\n    console.error(error);\n  }\n);\n'})})}),(0,s.jsx)(u.A,{value:"php",label:"PHP",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:'<?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsList;\nuse FattureInCloud\\Model\\IssuedDocumentType;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . \'/vendor/autoload.php\');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()->setAccessToken(\'YOUR_ACCESS_TOKEN\');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice->setType(IssuedDocumentType::INVOICE);\n\n$entity = new Entity;\n$entity->setName("test");\n\n$invoice->setEntity($entity);\n$invoice->setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                "name" => "prod1",\n                "net_price" => 35,\n                "qty" => 1,\n                "vat" => new VatType(\n                    array(\n                        "id" => 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                "name" => "prod2",\n                "net_price" => 39,\n                "qty" => 1,\n                "vat" => new VatType(\n                    array(\n                        "id" => 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_new_issued_document_totals_request = new GetNewIssuedDocumentTotalsRequest;\n$get_new_issued_document_totals_request->setData($invoice);\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\ntry {\n    $result = $apiInstance->getNewIssuedDocumentTotals($company_id, $get_new_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo \'Exception when calling IssuedDocumentsApi->getNewIssuedDocumentTotals: \', $e->getMessage(), PHP_EOL;\n}\n'})})}),(0,s.jsx)(u.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.entity import Entity\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document_type import IssuedDocumentType\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_request import GetNewIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_new_issued_document_totals_response import GetNewIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = "YOUR_ACCESS_TOKEN"\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = IssuedDocument(\n    type = IssuedDocumentType("invoice"),\n    entity = Entity(\n        name="test"\n    ),\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name="prod1",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name="prod2",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_new_issued_document_totals_request = GetNewIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_new_issued_document_totals(company_id, get_new_issued_document_totals_request=get_new_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print("Exception when calling IssuedDocumentsApi->get_new_issued_document_totals: %s\\n" % e)\n'})})}),(0,s.jsx)(u.A,{value:"rb",label:"Ruby",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rb",children:'require \'time\'\nrequire \'fattureincloud_ruby_sdk\'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = \'YOUR ACCESS TOKEN\'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n# set your company id\ncompany_id = 12345\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    type: FattureInCloud_Ruby_Sdk::IssuedDocumentType::INVOICE,\n    entity: FattureInCloud_Ruby_Sdk::Entity.new(\n        name: "test",\n    ),\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: "prod1",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: "prod2",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_new_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetNewIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_new_issued_document_totals\nbegin\n  result = api_instance.get_new_issued_document_totals(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError => e\n  puts "Error when calling IssuedDocumentsApi->get_new_issued_document_totals: #{e}"\nend\n'})})}),(0,s.jsx)(u.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetNewIssuedDocumentTotalsRequest,\n} from "@fattureincloud/fattureincloud-ts-sdk";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: "YOUR ACCESS TOKEN",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: "test",\n  },\n  items_list: [\n    {\n      name: "prod1",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: "prod2",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getNewIssuedDocumentTotalsRequest: GetNewIssuedDocumentTotalsRequest = {\n  data: invoice,\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getNewIssuedDocumentTotals(companyId, getNewIssuedDocumentTotalsRequest)\n  .then(\n    (data) => {\n      console.log(data);\n    },\n    (error) => {\n      console.error(error);\n    }\n  );\n'})})}),(0,s.jsxs)(u.A,{value:"zap",label:"Zapier",children:[(0,s.jsxs)(t.p,{children:["The Zapier Action you need is called ",(0,s.jsx)(t.strong,{children:"Get New Issued Document Totals"}),".\nAfter you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Zapier - Company ID Selection",src:n(9675).A+"",width:"920",height:"102"})}),(0,s.jsxs)(t.p,{children:["Next, you must insert a request similar to the one we need for the ",(0,s.jsx)(t.em,{children:"Create Issued Document"})," request. We suggest you check the ",(0,s.jsx)(t.a,{href:"/docs/guides/invoice-creation.mdx",children:"Invoice Creation"})," Guide for more info."]}),(0,s.jsx)(t.p,{children:"You can then use the resulting totals of this request in the creation request."})]})]}),"\n",(0,s.jsxs)(t.h3,{id:"scroll-existing-invoice-totals",children:["\ud83d\udcdc","\xa0 Existing invoice totals"]}),"\n",(0,s.jsxs)(t.p,{children:["If you want to edit an existing invoice instead, for example, to add a new item, you can get the updated totals invoking the ",(0,s.jsx)(t.a,{href:"/api-reference#post-/c/-company_id-/issued_documents/-document_id-/totals",children:"Get Existing Issued Document Totals"})," method and passing the updated fields in the request body."]}),"\n",(0,s.jsxs)(t.p,{children:["In the following example, we want to a third item to an existing invoice and we want to know what will be the resulting updated totals before making the ",(0,s.jsx)(t.a,{href:"/api-reference#put-/c/-company_id-/issued_documents/-document_id-",children:"modify issued document"})," call, using the previously described method:"]}),"\n",(0,s.jsxs)(i.A,{children:[(0,s.jsx)(u.A,{value:"request",label:"Request",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-http",children:'POST /c/2/issued_document/12345/totals HTTP/1.1\nHost: api-v2.fattureincloud.it\nAccept: application/json\nContent-Type: application/json\nContent-Length: 500\n\n\n{\n    "data": {\n        "items_list": [\n            {\n                "vat": {\n                    "id": 1\n                },\n                "name": "prod1",\n                "net_price": 35,\n                "qty": 1\n            },\n            {\n                "vat": {\n                    "id": 1\n                },\n                "name": "prod2",\n                "net_price": 39,\n                "qty": 1\n            },\n            {\n                "vat": {\n                    "id": 1\n                },\n                "name": "prod3",\n                "net_price": 48,\n                "qty": 1\n            }\n        ]\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"response",label:"Response",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n  "data": {\n    "amount_net": 122,\n    "amount_global_cassa_taxable": 122,\n    "taxable_amount": 122,\n    "vat_list": {\n      "21": {\n        "amount_net": 122,\n        "amount_vat": 25.62\n      }\n    },\n    "amount_vat": 25.62,\n    "amount_gross": 147.62,\n    "amount_enasarco_taxable": 0,\n    "amount_due": 147.62,\n    "amount_due_discount": 0,\n    "payments_sum": 0\n  }\n}\n'})})})]}),"\n",(0,s.jsx)(t.p,{children:"And here there are the examples to make this request with our SDKs:"}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(u.A,{value:"cs",label:"C#",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = "YOUR_ACCESS_TOKEN";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n\n            //set your company id\n            var companyId = 12345;\n\n            //set your existing invoice id\n            var invoiceId = 54321;\n\n            //set your invoice info\n            IssuedDocument invoice = new IssuedDocument(\n                itemsList: new List < IssuedDocumentItemsListItem > {\n                    new IssuedDocumentItemsListItem(\n                        name: "prod1",\n                        netPrice: 35,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: "prod2",\n                        netPrice: 39,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    ),\n                    new IssuedDocumentItemsListItem(\n                        name: "prod3",\n                        netPrice: 48,\n                        qty: 1,\n                        vat: new VatType(\n                            id: 0\n                        )\n                    )\n                }\n            );\n\n            // Here we put our invoice in the request object\n            GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest(\n                data: invoice\n            );\n\n            // Now we are all set for the final call\n            // Get existing issued documents totals: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n            try {\n                GetExistingIssuedDocumentTotalsResponse result = apiInstance.GetExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine("Exception when calling IssuedDocumentsApi.GetExistingIssuedDocumentTotals: " + e.Message);\n                Console.WriteLine("Status Code: " + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"go",label:"Go",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// NOTE: this is a complete request, but please customize it!!!\n// In the next step we\'ll explain how to perform the request to the API.\n\n// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n\t"context"\n\t"encoding/json"\n\t"fmt"\n\t"os"\n\n\tfattureincloudapi "github.com/fattureincloud/fattureincloud-go-sdk/v2/api"\n\tfattureincloud "github.com/fattureincloud/fattureincloud-go-sdk/v2/model"\n)\n\nfunc main() {\n\t//set your access token\n\tauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, "YOUR_ACCESS_TOKEN")\n\tconfiguration := fattureincloudapi.NewConfiguration()\n\tapiClient := fattureincloudapi.NewAPIClient(configuration)\n\n\t//set your company id\n\tcompanyId := int32(12345)\n\n\t//set your document id\n\tdocumentId := int32(54321)\n\n\t//set your invoice info\n\tinvoice := *fattureincloud.NewIssuedDocument().\n\t\tSetEntity(*fattureincloud.NewEntity().\n\t\t\tSetId(1)).\n\t\tSetType(fattureincloud.IssuedDocumentTypes.INVOICE).\n\t\tSetItemsList([]fattureincloud.IssuedDocumentItemsListItem{\n\t\t\t*fattureincloud.NewIssuedDocumentItemsListItem().\n\t\t\t\tSetName("prod1").\n\t\t\t\tSetNetPrice(35).\n\t\t\t\tSetQty(1).\n\t\t\t\tSetVat(*fattureincloud.NewVatType().SetId(0)),\n\t\t\t*fattureincloud.NewIssuedDocumentItemsListItem().\n\t\t\t\tSetName("prod2").\n\t\t\t\tSetNetPrice(39).\n\t\t\t\tSetQty(1).\n\t\t\t\tSetVat(*fattureincloud.NewVatType().SetId(0)),\n\t\t\t*fattureincloud.NewIssuedDocumentItemsListItem().\n\t\t\t\tSetName("prod3").\n\t\t\t\tSetNetPrice(48).\n\t\t\t\tSetQty(1).\n\t\t\t\tSetVat(*fattureincloud.NewVatType().SetId(0)),\n\t\t})\n\n\t// Here we put our invoice in the request object\n\tgetExistingIssuedDocumentTotalsRequest := *fattureincloud.NewGetExistingIssuedDocumentTotalsRequest().SetData(invoice)\n\n\t// Now we are all set for the final call\n\t// Create the invoice: https://github.com/fattureincloud/fattureincloud-go-sdk/blob/master/docs/IssuedDocumentsApi.md#getexistingissueddocumenttotals\n\tresp, r, err := apiClient.IssuedDocumentsAPI.GetExistingIssuedDocumentTotals(auth, companyId, documentId).GetExistingIssuedDocumentTotalsRequest(getExistingIssuedDocumentTotalsRequest).Execute()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, "Error when calling `IssuedDocumentsApi.GetNewIssuedDocumentTotals``: %v\\n", err)\n\t\tfmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n\t}\n\tjson.NewEncoder(os.Stdout).Encode(resp)\n\n}\n'})})}),(0,s.jsx)(u.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication("OAuth2AuthenticationCodeFlow");\n        OAuth2AuthenticationCodeFlow.setAccessToken("YOUR ACCESS TOKEN");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        //set your existing invoice id\n        Integer invoiceId = 54321;\n\n        //set your invoice info\n        IssuedDocument invoice = new IssuedDocument()\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name("prod1")\n                            .netPrice(BigDecimal.valueOf(35))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name("prod2")\n                            .netPrice(BigDecimal.valueOf(39))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                )\n                .addItemsListItem(\n                    new IssuedDocumentItemsListItem()\n                            .name("prod3")\n                            .netPrice(BigDecimal.valueOf(48))\n                            .qty(BigDecimal.valueOf(1))\n                            .vat(new VatType().id(0))\n                );\n\n        // Here we put our invoice in the request object\n        GetExistingIssuedDocumentTotalsRequest getExistingIssuedDocumentTotalsRequest = new GetExistingIssuedDocumentTotalsRequest()\n                .data(invoice);\n\n        // Now we are all set for the final call\n        // Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\n        try {\n            GetExistingIssuedDocumentTotalsResponse result = apiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, getExistingIssuedDocumentTotalsRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println("Exception when calling IssuedDocumentsApi#getExistingIssuedDocumentTotals");\n            System.err.println("Status code: " + e.getCode());\n            System.err.println("Reason: " + e.getResponseBody());\n            System.err.println("Response headers: " + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'var fattureInCloudSdk = require("@fattureincloud/fattureincloud-js-sdk");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n//set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications["OAuth2AuthenticationCodeFlow"];\nOAuth2AuthenticationCodeFlow.accessToken = "YOUR_ACCESS_TOKEN";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice = new fattureInCloudSdk.IssuedDocument();\ninvoice.items_list = [\n  {\n    name: "prod1",\n    net_price: 35,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: "prod2",\n    net_price: 39,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n  {\n    name: "prod3",\n    net_price: 48,\n    qty: 1,\n    vat: {\n      id: 0,\n    },\n  },\n];\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest =\n  new fattureInCloudSdk.GetExistingIssuedDocumentTotalsRequest();\ngetExistingIssuedDocumentTotalsRequest.data = invoice;\n\nlet opts = {\n  getExistingIssuedDocumentTotalsRequest:\n    getExistingIssuedDocumentTotalsRequest,\n};\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\napiInstance.getExistingIssuedDocumentTotals(companyId, invoiceId, opts).then(\n  (result) => {\n    console.log(\n      "API called successfully. Returned result: " + JSON.stringify(result)\n    );\n  },\n  (error) => {\n    console.error(error);\n  }\n);\n'})})}),(0,s.jsx)(u.A,{value:"php",label:"PHP",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:'<?php\n\nuse FattureInCloud\\Model\\Entity;\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentItemsListItem;\nuse FattureInCloud\\Model\\VatType;\n\nrequire_once(__DIR__ . \'/vendor/autoload.php\');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()->setAccessToken(\'YOUR_ACCESS_TOKEN\');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n//set your existing invoice id\n$invoice_id = 54321;\n\n//set your invoice info\n$invoice = new IssuedDocument;\n$invoice->setItemsList(\n    array(\n        new IssuedDocumentItemsListItem(\n            array(\n                "name" => "prod1",\n                "net_price" => 35,\n                "qty" => 1,\n                "vat" => new VatType(\n                    array(\n                        "id" => 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                "name" => "prod2",\n                "net_price" => 39,\n                "qty" => 1,\n                "vat" => new VatType(\n                    array(\n                        "id" => 0\n                    )\n                )\n            )\n        ),\n        new IssuedDocumentItemsListItem(\n            array(\n                "name" => "prod3",\n                "net_price" => 48,\n                "qty" => 1,\n                "vat" => new VatType(\n                    array(\n                        "id" => 0\n                    )\n                )\n            )\n        )\n    )\n);\n\n// Here we put our invoice in the request object\n$get_existing_issued_document_totals_request = new GetExistingIssuedDocumentTotalsRequest;\n$get_existing_issued_document_totals_request->setData($invoice);\n\n// Now we are all set for the final call\n// Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#getExistingIssuedDocumentTotals\ntry {\n    $result = $apiInstance->getExistingIssuedDocumentTotals($company_id, $invoice_id, $get_existing_issued_document_totals_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo \'Exception when calling IssuedDocumentsApi->getExistingIssuedDocumentTotals: \', $e->getMessage(), PHP_EOL;\n}\n'})})}),(0,s.jsx)(u.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.vat_type import VatType\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_request import GetExistingIssuedDocumentTotalsRequest\nfrom fattureincloud_python_sdk.models.get_existing_issued_document_totals_response import GetExistingIssuedDocumentTotalsResponse\nfrom fattureincloud_python_sdk.models.issued_document_items_list_item import IssuedDocumentItemsListItem\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = "YOUR_ACCESS_TOKEN"\n\n# set your company id\ncompany_id = 12345\n\n# set your existing invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = IssuedDocument(\n    items_list = [\n        IssuedDocumentItemsListItem(\n            name="prod1",\n            net_price=35.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name="prod2",\n            net_price=39.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        ),\n        IssuedDocumentItemsListItem(\n            name="prod3",\n            net_price=48.0,\n            qty=1.0,\n            vat=VatType(\n                id=0\n            )\n        )\n    ]\n)\n\n# Here we put our invoice in the request object\nget_existing_issued_document_totals_request = GetExistingIssuedDocumentTotalsRequest(\n    data = invoice\n)\n\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.get_existing_issued_document_totals(company_id, invoice_id get_existing_issued_document_totals_request=get_existing_issued_document_totals_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print("Exception when calling IssuedDocumentsApi->get_existing_issued_document_totals: %s\\n" % e)\n'})})}),(0,s.jsx)(u.A,{value:"rb",label:"Ruby",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rb",children:'require \'time\'\nrequire \'fattureincloud_ruby_sdk\'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = \'YOUR ACCESS TOKEN\'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# set your invoice id\ninvoice_id = 54321\n\n# set your invoice info\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    items_list: Array(\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: "prod1",\n            net_price: 35,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: "prod2",\n            net_price: 39,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        ),\n        FattureInCloud_Ruby_Sdk::IssuedDocumentItemsListItem.new(\n            name: "prod3",\n            net_price: 48,\n            qty: 1,\n            vat: FattureInCloud_Ruby_Sdk::VatType.new(\n                id: 0\n            )\n        )\n    )\n)\n\n# Here we put our invoice in the request object\nopts = {\n  get_existing_issued_document_totals_request: FattureInCloud_Ruby_Sdk::GetExistingIssuedDocumentTotalsRequest.new(data: invoice)\n}\n# Now we are all set for the final call\n# Get existing issued document totals: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#get_existing_issued_document_totals\nbegin\n  result = api_instance.get_existing_issued_document_totals(company_id, invoice_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError => e\n  puts "Error when calling IssuedDocumentsApi->get_existing_issued_document_totals: #{e}"\nend\n'})})}),(0,s.jsx)(u.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  IssuedDocumentType,\n  GetExistingIssuedDocumentTotalsRequest,\n} from "@fattureincloud/fattureincloud-ts-sdk";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: "YOUR ACCESS TOKEN",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n//set your invoice id\nlet invoiceId = 54321;\n\n//set your invoice info\nlet invoice: IssuedDocument = {\n  type: IssuedDocumentType.Invoice,\n  entity: {\n    name: "test",\n  },\n  items_list: [\n    {\n      name: "prod1",\n      net_price: 35,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: "prod2",\n      net_price: 39,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n    {\n      name: "prod3",\n      net_price: 48,\n      qty: 1,\n      vat: {\n        id: 0,\n      },\n    },\n  ],\n};\n\n// Here we put our invoice in the request object\nlet getExistingIssuedDocumentTotalsRequest: GetExistingIssuedDocumentTotalsRequest =\n  {\n    data: invoice,\n  };\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance\n  .getExistingIssuedDocumentTotals(\n    companyId,\n    invoiceId,\n    getExistingIssuedDocumentTotalsRequest\n  )\n  .then(\n    (data) => {\n      console.log(data);\n    },\n    (error) => {\n      console.error(error);\n    }\n  );\n'})})}),(0,s.jsxs)(u.A,{value:"zap",label:"Zapier",children:[(0,s.jsxs)(t.p,{children:["The Zapier Action you need is called ",(0,s.jsx)(t.strong,{children:"Get Existing Issued Document Totals"}),".\nAfter you select the action and log in, you need to select your Company ID. Luckily, our Actions let you select it from a simple dropdown menu."]}),(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{alt:"Zapier - Company ID Selection",src:n(9675).A+"",width:"920",height:"102"})}),(0,s.jsx)(t.p,{children:"Additionally, you need to select the ID of the existing document, that can be provided by a previous step."}),(0,s.jsxs)(t.p,{children:["Next, you must insert a request similar to the one we need for the ",(0,s.jsx)(t.em,{children:"Modify Issued Document"})," request. We suggest you check the ",(0,s.jsx)(t.a,{href:"/docs/guides/invoice-creation.mdx",children:"Invoice Creation"})," Guide for more info."]}),(0,s.jsx)(t.p,{children:"You can then use the resulting totals of this request in the modification request."})]})]}),"\n",(0,s.jsxs)(t.h2,{id:"tophat-the-magic-field",children:["\ud83c\udfa9","\xa0 The magic field"]}),"\n",(0,s.jsx)(t.p,{children:"If you don't mind about the amounts of each payment, but you just want them to match the expected totals, we provide a magic field that could be perfect for you."}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.strong,{children:"options.fix_payments"})," field, when set to true, adjusts your ",(0,s.jsx)(t.em,{children:"last"})," payment amount of the payments list to match your document total, incrementing or reducing the amount accordingly. Of course, if you have only one payment it will be modified to match the document total."]}),"\n",(0,s.jsxs)(t.p,{children:["The options.fix_payment field must be used in the ",(0,s.jsx)(t.a,{href:"/api-reference#post-/c/-company_id-/issued_documents",children:"invoice creation request"}),". Please, notice that this field is ",(0,s.jsx)(t.strong,{children:"not"})," included in the ",(0,s.jsx)(t.em,{children:"data"})," field that contains the main section of the request, as you can see in the following example."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-json",children:'{\n    "data": {\n            ...\n    },\n    "options": {\n        "fix_payments": true\n    }\n}\n'})}),"\n",(0,s.jsx)(t.p,{children:"And here there is the example to make this request with our SDKs:"}),"\n",(0,s.jsxs)(i.A,{groupId:"languages",children:[(0,s.jsx)(u.A,{value:"cs",label:"C#",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-cs",children:'using System;\nusing System.Collections.Generic;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Client;\nusing It.FattureInCloud.Sdk.Model;\n\nnamespace test {\n    class Program {\n        static void Main(string[] args) {\n            Configuration config = new Configuration();\n\n            //set your access token\n            config.AccessToken = "YOUR_ACCESS_TOKEN";\n\n            var apiInstance = new IssuedDocumentsApi(config);\n            //set your company id\n            var companyId = 12345;\n\n            // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n            IssuedDocument invoice = new IssuedDocument(\n                // ...\n            );\n\n            // Here we put our invoice in the request object\n            CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest(\n                data: invoice,\n                // And here we set the magic field\n                options: new IssuedDocumentOptions(\n                    fixPayments: true\n                )\n            );\n\n            // Now we are all set for the final call\n            // Create the invoice: https://github.com/fattureincloud/fattureincloud-csharp-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n            try {\n                CreateIssuedDocumentResponse result = apiInstance.CreateIssuedDocument(companyId, createIssuedDocumentRequest);\n                Console.WriteLine(result);\n            } catch (ApiException e) {\n                Console.WriteLine("Exception when calling IssuedDocumentsApi.CreateIssuedDocument: " + e.Message);\n                Console.WriteLine("Status Code: " + e.ErrorCode);\n                Console.WriteLine(e.StackTrace);\n            }\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"go",label:"Go",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// in this example we are using our Go SDK\n// https://github.com/fattureincloud/fattureincloud-go-sdk\npackage main\n\nimport (\n\t"context"\n\t"encoding/json"\n\t"fmt"\n\t"os"\n\n\tfattureincloudapi "github.com/fattureincloud/fattureincloud-go-sdk/v2/api"\n\tfattureincloud "github.com/fattureincloud/fattureincloud-go-sdk/v2/model"\n)\n\nfunc main() {\n\n\t// Configure OAuth2 access token for authorization:\n\tauth := context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, "YOUR_ACCESS_TOKEN")\n\tconfiguration := fattureincloudapi.NewConfiguration()\n\tapiClient := fattureincloudapi.NewAPIClient(configuration)\n\n\t//set your company id\n\tcompanyId := int32(12345)\n\n\t// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n\tinvoice := *fattureincloud.NewIssuedDocument(\n\t// ...\n\t)\n\n\t// Here we put our invoice in the request object\n\tcreateIssuedDocumentRequest := *fattureincloud.NewCreateIssuedDocumentRequest().\n\t\tSetData(invoice).\n\t\t// And here we set the magic field\n\t\tSetOptions(*fattureincloud.NewIssuedDocumentOptions().\n\t\t\tSetFixPayments(true),\n\t\t)\n\n\tresp, r, err := apiClient.IssuedDocumentsAPI.CreateIssuedDocument(auth, companyId).CreateIssuedDocumentRequest(createIssuedDocumentRequest).Execute()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, "Error when calling `IssuedDocumentsApi.CreateIssuedDocument``: %v\\n", err)\n\t\tfmt.Fprintf(os.Stderr, "Full HTTP response: %v\\n", r)\n\t}\n\tjson.NewEncoder(os.Stdout).Encode(resp)\n\n}\n'})})}),(0,s.jsx)(u.A,{value:"java",label:"Java",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-java",children:'import it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.auth.*;\nimport it.fattureincloud.sdk.model.*;\nimport it.fattureincloud.sdk.api.IssuedDocumentsApi;\nimport java.math.BigDecimal;\nimport java.time.LocalDate;\n\npublic class Example {\n    public static void main(String[] args) {\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        //set your access token\n        OAuth OAuth2AuthenticationCodeFlow = (OAuth) defaultClient.getAuthentication("OAuth2AuthenticationCodeFlow");\n        OAuth2AuthenticationCodeFlow.setAccessToken("YOUR ACCESS TOKEN");\n\n        IssuedDocumentsApi apiInstance = new IssuedDocumentsApi(defaultClient);\n\n        //set your company id\n        Integer companyId = 12345;\n\n        // NOTE: this is not a complete request, for it to work you must set the invoice details!!\n        IssuedDocument invoice = new IssuedDocument()\n        // ...\n\n        // Here we put our invoice in the request object\n        CreateIssuedDocumentRequest createIssuedDocumentRequest = new CreateIssuedDocumentRequest()\n            .data(invoice)\n            // And here we set the magic field\n            .options(\n                new IssuedDocumentOptions()\n                    .fixPayments(true)\n            );\n\n        // Now we are all set for the final call\n        // Create the invoice: https://github.com/fattureincloud/fattureincloud-java-sdk/blob/master/docs/IssuedDocumentsApi.md#createissueddocument\n        try {\n            CreateIssuedDocumentResponse result = apiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest);\n            System.out.println(result);\n        } catch (ApiException e) {\n            System.err.println("Exception when calling IssuedDocumentsApi#createIssuedDocument");\n            System.err.println("Status code: " + e.getCode());\n            System.err.println("Reason: " + e.getResponseBody());\n            System.err.println("Response headers: " + e.getResponseHeaders());\n            e.printStackTrace();\n        }\n    }\n}\n'})})}),(0,s.jsx)(u.A,{value:"js",label:"JavaScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-js",children:'var fattureInCloudSdk = require("@fattureincloud/fattureincloud-js-sdk");\nlet defaultClient = fattureInCloudSdk.ApiClient.instance;\n\n// set your access token\nlet OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications["OAuth2AuthenticationCodeFlow"];\nOAuth2AuthenticationCodeFlow.accessToken = "YOUR_ACCESS_TOKEN";\n\nlet apiInstance = new fattureInCloudSdk.IssuedDocumentsApi();\n\n// set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n\nlet invoice = new fattureInCloudSdk.IssuedDocument();\n// ...\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest =\n  new fattureInCloudSdk.CreateIssuedDocumentRequest();\ncreateIssuedDocumentRequest.data = invoice;\n// And here we set the magic field\ncreateIssuedDocumentRequest.options = {\n  fix_payments: true,\n};\n\nlet opts = {\n  createIssuedDocumentRequest: createIssuedDocumentRequest,\n};\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-js-sdk/blob/master/docs/IssuedDocumentsApi.md#createIssuedDocument\napiInstance.createIssuedDocument(companyId, opts).then(\n  (result) => {\n    console.log(\n      "API called successfully. Returned result: " + JSON.stringify(result)\n    );\n  },\n  (error) => {\n    console.error(error);\n  }\n);\n'})})}),(0,s.jsx)(u.A,{value:"php",label:"PHP",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-php",children:"<?php\n\nuse FattureInCloud\\Model\\IssuedDocument;\nuse FattureInCloud\\Model\\IssuedDocumentOptions;\n\nrequire_once(__DIR__ . '/vendor/autoload.php');\n\n//set your access token\n$config = FattureInCloud\\Configuration::getDefaultConfiguration()->setAccessToken('YOUR_ACCESS_TOKEN');\n\n$apiInstance = new FattureInCloud\\Api\\IssuedDocumentsApi(\n    new GuzzleHttp\\Client(),\n    $config\n);\n\n//set your company id\n$company_id = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\n$invoice = new IssuedDocument;\n\n// Here we put our invoice in the request object\n$create_issued_document_request = new CreateIssuedDocumentRequest;\n$create_issued_document_request->setData($invoice);\n// And here we set the magic field\n$create_issued_document_request->setOptions(\n    new IssuedDocumentOptions(\n        [\n            \"fix_payments\" => true\n        ]\n    )\n);\n\n\n// Now we are all set for the final call\n// Create the invoice: https://github.com/fattureincloud/fattureincloud-php-sdk/blob/master/docs/Api/IssuedDocumentsApi.md#createissueddocument\ntry {\n    $result = $apiInstance->createIssuedDocument($company_id, $create_issued_document_request);\n    print_r($result);\n} catch (Exception $e) {\n    echo 'Exception when calling IssuedDocumentsApi->createIssuedDocument: ', $e->getMessage(), PHP_EOL;\n}\n"})})}),(0,s.jsx)(u.A,{value:"py",label:"Python",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-py",children:'import datetime\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import issued_documents_api\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocument\nfrom fattureincloud_python_sdk.models.issued_document import IssuedDocumentOptions\n\nfrom pprint import pprint\n\n# set your access token\nconfiguration = fattureincloud_python_sdk.Configuration()\nconfiguration.access_token = "YOUR_ACCESS_TOKEN"\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = IssuedDocument(\n   # ...\n)\n\n# Here we put our invoice in the request object\ncreate_issued_document_request = CreateIssuedDocumentRequest(\n    data = invoice,\n    # And here we set the magic field\n    options = IssuedDocumentOptions(\n        fix_payments=true\n    )\n)\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-python-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\n\nwith fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n\n    api_instance = issued_documents_api.IssuedDocumentsApi(api_client)\n    try:\n        api_response = api_instance.create_issued_document(company_id, create_issued_document_request=create_issued_document_request)\n        pprint(api_response)\n    except fattureincloud_python_sdk.ApiException as e:\n        print("Exception when calling IssuedDocumentsApi->create_issued_document: %s\\n" % e)\n'})})}),(0,s.jsx)(u.A,{value:"rb",label:"Ruby",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-rb",children:"require 'time'\nrequire 'fattureincloud_ruby_sdk'\n\nFattureInCloud_Ruby_Sdk.configure do |config|\n  # set your access token\n  config.access_token = 'YOUR ACCESS TOKEN'\nend\n\napi_instance = FattureInCloud_Ruby_Sdk::IssuedDocumentsApi.new\n\n# set your company id\ncompany_id = 12345\n\n# NOTE: this is not a complete request, for it to work you must set the invoice details!!\ninvoice = FattureInCloud_Ruby_Sdk::IssuedDocument.new(\n    # ...\n)\n\n# Here we put our invoice in the request object\nopts = {\n  create_issued_document_request: FattureInCloud_Ruby_Sdk::CreateIssuedDocumentRequest.new(\n        data: invoice,\n        # And here we set the magic field\n        options: FattureInCloud_Ruby_Sdk::IssuedDocumentOptions.new(\n            fix_payments: true\n      )\n    )\n}\n\n# Now we are all set for the final call\n# Create the invoice: https://github.com/fattureincloud/fattureincloud-ruby-sdk/blob/master/docs/IssuedDocumentsApi.md#create_issued_document\nbegin\n  result = api_instance.create_issued_document(company_id, opts)\n  p result\nrescue FattureInCloud_Ruby_Sdk::ApiError => e\n  puts \"Error when calling IssuedDocumentsApi->create_issued_document: #{e}\"\nend\n"})})}),(0,s.jsx)(u.A,{value:"ts",label:"TypeScript",children:(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-ts",children:'import {\n  Configuration,\n  IssuedDocumentsApi,\n  IssuedDocument,\n  CreateIssuedDocumentRequest,\n} from "@fattureincloud/fattureincloud-ts-sdk";\n\n//set your access token\nconst apiConfig = new Configuration({\n  accessToken: "YOUR ACCESS TOKEN",\n});\n\nlet apiInstance = new IssuedDocumentsApi(apiConfig);\n\n//set your company id\nlet companyId = 12345;\n\n// NOTE: this is not a complete request, for it to work you must set the invoice details!!\nlet invoice: IssuedDocument = {\n  // ...\n};\n\n// Here we put our invoice in the request object\nlet createIssuedDocumentRequest: CreateIssuedDocumentRequest = {\n  data: invoice,\n  options: {\n    fix_payments: true,\n  },\n};\n\n// Now we are all set for the final call\n// Get new issued document totals: https://github.com/fattureincloud/fattureincloud-ts-sdk/blob/master/docs/IssuedDocumentsApi.md#getNewIssuedDocumentTotals\napiInstance.createIssuedDocument(companyId, createIssuedDocumentRequest).then(\n  (data) => {\n    console.log(data);\n  },\n  (error) => {\n    console.error(error);\n  }\n);\n'})})}),(0,s.jsx)(u.A,{value:"zap",label:"Zapier",children:(0,s.jsxs)(t.p,{children:["In Zapier, the magic field is called ",(0,s.jsx)(t.strong,{children:"Fixes your last payment amount to match your document total"}),", and its code is ",(0,s.jsx)(t.strong,{children:"options.fix_payments"}),";\nit must be set in the Create Issued Document request, check the ",(0,s.jsx)(t.a,{href:"/docs/guides/invoice-creation.mdx",children:"Invoice Creation"})," Guide for more details about this request."]})})]})]})}function p(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(m,{...e})}):m(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>u});n(6540);var s=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function u(e){let{children:t,hidden:n,className:u}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,s.A)(o.tabItem,u),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>D});var s=n(6540),o=n(4164),i=n(3104),u=n(6347),a=n(205),c=n(7485),r=n(1682),d=n(679);function l(e){return s.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,s.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function m(e){const{values:t,children:n}=e;return(0,s.useMemo)((()=>{const e=t??function(e){return l(e).map((e=>{let{props:{value:t,label:n,attributes:s,default:o}}=e;return{value:t,label:n,attributes:s,default:o}}))}(n);return function(e){const t=(0,r.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function p(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function h(e){let{queryString:t=!1,groupId:n}=e;const o=(0,u.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(i),(0,s.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function I(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=m(e),[u,c]=(0,s.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!p({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const s=n.find((e=>e.default))??n[0];if(!s)throw new Error("Unexpected error: 0 tabValues");return s.value}({defaultValue:t,tabValues:i}))),[r,l]=h({queryString:n,groupId:o}),[I,g]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,d.Dv)(n);return[o,(0,s.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),f=(()=>{const e=r??I;return p({value:e,tabValues:i})?e:null})();(0,a.A)((()=>{f&&c(f)}),[f]);return{selectedValue:u,selectValue:(0,s.useCallback)((e=>{if(!p({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),l(e),g(e)}),[l,g,i]),tabValues:i}}var g=n(2303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var y=n(4848);function _(e){let{className:t,block:n,selectedValue:s,selectValue:u,tabValues:a}=e;const c=[],{blockElementScrollPositionUntilNextRender:r}=(0,i.a_)(),d=e=>{const t=e.currentTarget,n=c.indexOf(t),o=a[n].value;o!==s&&(r(t),u(o))},l=e=>{let t=null;switch(e.key){case"Enter":d(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,y.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:a.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,y.jsx)("li",{role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,ref:e=>c.push(e),onKeyDown:l,onClick:d,...i,className:(0,o.A)("tabs__item",f.tabItem,i?.className,{"tabs__item--active":s===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:i}=e;const u=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=u.find((e=>e.props.value===i));return e?(0,s.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,y.jsx)("div",{className:"margin-top--md",children:u.map(((e,t)=>(0,s.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function v(e){const t=I(e);return(0,y.jsxs)("div",{className:(0,o.A)("tabs-container",f.tabList),children:[(0,y.jsx)(_,{...t,...e}),(0,y.jsx)(w,{...t,...e})]})}function D(e){const t=(0,g.A)();return(0,y.jsx)(v,{...e,children:l(e.children)},String(t))}},9675:(e,t,n)=>{n.d(t,{A:()=>s});const s=n.p+"assets/images/company-id-selection-cf25cdd7863b083f86db13c73f2b5232.png"},8453:(e,t,n)=>{n.d(t,{R:()=>u,x:()=>a});var s=n(6540);const o={},i=s.createContext(o);function u(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:u(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);