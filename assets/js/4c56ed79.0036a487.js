"use strict";(self.webpackChunktse_dev_api=self.webpackChunktse_dev_api||[]).push([[9870],{1157:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>u,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var r=n(4848),o=n(8453),i=n(1470),a=n(9365);const s={sidebar_position:7,title:"Syncronization using Polling",slug:"syncronization-using-polling",description:"Syncronize your data using Polling",tags:["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},c=void 0,l={id:"scenario/syncronization-using-polling",title:"Syncronization using Polling",description:"Syncronize your data using Polling",source:"@site/docs/scenario/syncronization-using-polling.mdx",sourceDirName:"scenario",slug:"/scenario/syncronization-using-polling",permalink:"/docs/scenario/syncronization-using-polling",draft:!1,unlisted:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/scenario/syncronization-using-polling.mdx",tags:[{inline:!0,label:"guides",permalink:"/docs/tags/guides"},{inline:!0,label:"sync",permalink:"/docs/tags/sync"},{inline:!0,label:"exponential backoff",permalink:"/docs/tags/exponential-backoff"},{inline:!0,label:"retry",permalink:"/docs/tags/retry"},{inline:!0,label:"code example",permalink:"/docs/tags/code-example"},{inline:!0,label:"c#",permalink:"/docs/tags/c"},{inline:!0,label:"java",permalink:"/docs/tags/java"},{inline:!0,label:"javascript",permalink:"/docs/tags/javascript"},{inline:!0,label:"php",permalink:"/docs/tags/php"},{inline:!0,label:"python",permalink:"/docs/tags/python"},{inline:!0,label:"ruby",permalink:"/docs/tags/ruby"},{inline:!0,label:"typescript",permalink:"/docs/tags/typescript"}],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Syncronization using Polling",slug:"syncronization-using-polling",description:"Syncronize your data using Polling",tags:["guides","sync","exponential backoff","retry","code example","c#","java","javascript","php","python","ruby","typescript"]},sidebar:"tutorialSidebar",previous:{title:"Join & Transform issued documents",permalink:"/docs/scenario/invoice-join-transform"},next:{title:"Externally generated XML",permalink:"/docs/scenario/externally-generated-xml"}},u={},d=[{value:"\ud83c\udfc8\xa0 Let&#39;s start!",id:"football-lets-start",level:2},{value:"\ud83c\udfd7\xa0 Libraries",id:"building_construction-libraries",level:2},{value:"1\ufe0f\u20e3\xa0 Initialize our SDK",id:"one-initialize-our-sdk",level:2},{value:"2\ufe0f\u20e3\xa0 Implement the Exponential Backoff",id:"two-implement-the-exponential-backoff",level:2},{value:"3\ufe0f\u20e3\xa0 The API Method",id:"three-the-api-method",level:2},{value:"4\ufe0f\u20e3\xa0 Manage the response",id:"four-manage-the-response",level:2},{value:"\ud83d\udcbb\xa0 Code Examples",id:"computer-code-examples",level:2},{value:"\ud83d\udcda\xa0 Additional resources",id:"books-additional-resources",level:2}];function p(e){const t={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["In this use case, we suppose that you have a system that you want to ",(0,r.jsx)(t.em,{children:"keep in sync with the TSE in Cloud API"}),", in particular ",(0,r.jsx)(t.strong,{children:"retrieving the list of the products"})," from our API and storing them in some way. In this example, we'll adopt a ",(0,r.jsx)(t.strong,{children:"polling"})," approach to retrieve the current state of the data stored in TSE in Cloud."]}),"\n",(0,r.jsxs)(t.p,{children:["If you want to download the complete SDKs examples you can find them ",(0,r.jsx)(t.a,{href:"https://github.com/fattureincloud/fattureincloud-quickstarts/tree/master/polling",children:"here"}),"."]}),"\n",(0,r.jsx)(t.admonition,{title:"Retrieve your Company ID!",type:"tip",children:(0,r.jsxs)(t.p,{children:["In this example, we'll suppose you have to manage just one Company, so we simply inserted its ID directly in the code. If instead, you need to be able to manage multiple companies, you'll need to retrieve the ID of the current company in some way.\nCheck the ",(0,r.jsx)(t.a,{href:"/basics/company-scoped-methods.mdx",children:"Company-scoped Methods"})," page for more info."]})}),"\n",(0,r.jsx)(t.admonition,{title:"Are you sure?",type:"danger",children:(0,r.jsxs)(t.p,{children:["A polling strategy is bad for both our systems and your ",(0,r.jsx)(t.a,{href:"/docs/basics/limits-and-quotas",children:"API Quotas"}),", because it generates a high volume of futile requests.",(0,r.jsx)("br",{}),"\nA better approach is to use our ",(0,r.jsx)(t.a,{href:"/webhooks/index.mdx",children:"Webhooks"})," to keep your system updated. Check them out!"]})}),"\n",(0,r.jsxs)(t.h2,{id:"football-lets-start",children:["\ud83c\udfc8","\xa0 Let's start!"]}),"\n",(0,r.jsxs)(t.p,{children:["To keep the code as simple as possible, we decided to write the data to a ",(0,r.jsx)(t.a,{href:"https://jsonlines.org/",children:"JSON lines"})," file, that could be then sent as input for an external system; of course, it is possible to use the retrieved elements as needed: for example, to update a Database status or to perform API calls towards a third-party system."]}),"\n",(0,r.jsxs)(t.admonition,{title:"Schedule the execution!",type:"warning",children:[(0,r.jsxs)(t.p,{children:["To keep two systems in sync using polling, it is necessary to reiterate the extraction of the data from our APIs, ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Cron",children:"scheduling"})," the code execution."]}),(0,r.jsxs)(t.p,{children:["In this example, we ",(0,r.jsx)(t.em,{children:"deliberately"})," omitted to add the code to repeat the execution of our code. For example, you could decide to add a ",(0,r.jsx)(t.strong,{children:"Cron Library"})," to your application or to execute the script using a ",(0,r.jsx)(t.strong,{children:"Job Scheduler"})," on your operating system. ",(0,r.jsx)(t.strong,{children:"This is up to you"}),"."]})]}),"\n",(0,r.jsx)(t.admonition,{title:"Or execute it once...",type:"info",children:(0,r.jsx)(t.p,{children:"Even if we created this code to keep two systems synchronized periodically, it can also be used for a one-off extraction of the data from the TSE in Cloud API. Just execute it as it is..."})}),"\n",(0,r.jsxs)(t.h2,{id:"building_construction-libraries",children:["\ud83c\udfd7","\xa0 Libraries"]}),"\n",(0,r.jsxs)(t.p,{children:["In our examples, we'll use the ",(0,r.jsx)(t.strong,{children:"TSE in Cloud SDKs"}),"; of course, you can just replace our SDKs with a simple HTTP Client if you prefer: check the ",(0,r.jsx)(t.a,{href:"/docs/sdks/",children:"dedicated page"})," for further info.\nAdditionally, for some languages, we added some other libraries to perform common tasks such as writing to the file system or performing the exponential backoff."]}),"\n",(0,r.jsxs)(t.h2,{id:"one-initialize-our-sdk",children:["1\ufe0f\u20e3","\xa0 Initialize our SDK"]}),"\n",(0,r.jsxs)(t.p,{children:["In the first part of this example, we import our SDK and initialize it, using the Access Token requested to perform the API call. For simplicity, we didn't implement the code to retrieve the access token in these examples, but you can find more information in the ",(0,r.jsx)(t.a,{href:"/quickstarts/index.mdx",children:"Quickstarts"})," or in the ",(0,r.jsx)(t.a,{href:"/authentication/index.mdx",children:"Authentication Implementation"})," pages."]}),"\n",(0,r.jsxs)(t.p,{children:["Since we're trying to collect the list of products for a certain company, the ",(0,r.jsxs)(t.strong,{children:["products",":r"]})," ",(0,r.jsx)(t.a,{href:"/docs/basics/scopes",children:"scope"})," will be required; if you need to use another API method please select the appropriate scopes."]}),"\n",(0,r.jsx)(t.p,{children:"Once the token is provided to our SDK, it is possible to start using it to interrogate our APIs."}),"\n",(0,r.jsxs)(t.h2,{id:"two-implement-the-exponential-backoff",children:["2\ufe0f\u20e3","\xa0 Implement the Exponential Backoff"]}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.strong,{children:"polling strategy"})," implies the exigency to perform a potentially huge amount of requests in a really short period. As explained ",(0,r.jsx)(t.a,{href:"/docs/basics/limits-and-quotas",children:"here"}),", our APIs are protected by a set of limits that could result in an error if too many requests are performed in a certain interval."]}),"\n",(0,r.jsxs)(t.p,{children:["This is why in our examples we wrapped the API call with an ",(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Exponential_backoff",children:"Exponential Backoff"})," method: it manages retries and time distance between two consecutive attempts, to avoid your script failing for a temporary quota-related issue."]}),"\n",(0,r.jsxs)(t.h2,{id:"three-the-api-method",children:["3\ufe0f\u20e3","\xa0 The API Method"]}),"\n",(0,r.jsxs)(t.p,{children:["The API method that we're using is the ",(0,r.jsx)(t.a,{href:"/api-reference#get-/c/-company_id-/products",children:"List Products"})," method, which returns the list of all the possible products for a certain company.\nThe ",(0,r.jsx)(t.em,{children:"List"})," methods provide ",(0,r.jsx)(t.a,{href:"/docs/basics/additional-capabilities/sort-results",children:"Sorting"})," and ",(0,r.jsx)(t.a,{href:"/docs/basics/additional-capabilities/customize-response",children:"Customizing"})," functionalities, but in this example we'll not use them."]}),"\n",(0,r.jsxs)(t.p,{children:["Each response of the List methods will be ",(0,r.jsx)(t.a,{href:"/docs/basics/additional-capabilities/paginate-results",children:"Paginated"}),": to avoid returning enormous amounts of data with a single call, the list of products will be split into different pages, that can be retrieved consecutively. Each response contains a set of dedicated pagination parameters, that are meant to make the pages navigation task easier for you."]}),"\n",(0,r.jsxs)(t.p,{children:["In our code, we'll perform the first List request on the first page provided by our API, with a page size of five elements. Then we'll use the pagination parameter ",(0,r.jsx)(t.em,{children:"last_page"})," to retrieve the subsequent pages, performing the needed number of API calls to export all the needed elements from the APIs."]}),"\n",(0,r.jsx)(t.admonition,{title:"Be aware of the index!",type:"danger",children:(0,r.jsxs)(t.p,{children:["Please, notice that the pages on our APIs use ",(0,r.jsx)(t.em,{children:"one-based numbering"}),": the first page has index 1."]})}),"\n",(0,r.jsxs)(t.h2,{id:"four-manage-the-response",children:["4\ufe0f\u20e3","\xa0 Manage the response"]}),"\n",(0,r.jsxs)(t.p,{children:["Each response contains a ",(0,r.jsx)(t.em,{children:"data"})," parameter, that is a JSON array representing one page (e.g. one subset of the list of products). Our SDKs parse the JSON array, so you can just use the elements contained in the array to perform the requested operations."]}),"\n",(0,r.jsx)(t.p,{children:"In this example, we're just trying to populate a JSON Lines file, so for each product retrieved we obtain the related JSON representation and append it to the text file."}),"\n",(0,r.jsxs)(t.h2,{id:"computer-code-examples",children:["\ud83d\udcbb","\xa0 Code Examples"]}),"\n",(0,r.jsx)(t.p,{children:"Here you can find the code described above."}),"\n",(0,r.jsxs)(i.A,{groupId:"languages",children:[(0,r.jsx)(a.A,{value:"cs",label:"C#",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-cs",children:'// The following dependencies are required\n// dotnet add package It.FattureInCloud.Sdk\n// dotnet add package Polly\n// dotnet add package Polly.Contrib.WaitAndRetry\n\nusing System;\nusing System.IO;\nusing System.Linq;\nusing Newtonsoft.Json;\nusing System.Collections.Generic;\nusing Polly;\nusing It.FattureInCloud.Sdk.Api;\nusing It.FattureInCloud.Sdk.Model;\nusing It.FattureInCloud.Sdk.Client;\nusing Polly.Contrib.WaitAndRetry;\n\nnamespace poll\n{\n    class Program\n    {\n        public static ProductsApi apiInstance;\n\n        static void Main(string[] args)\n        {\n            // This code should be executed periodically using a cron library or job scheduler.\n            // For example: https://www.quartz-scheduler.net/\n            SyncProducts();\n        }\n\n        private static void SyncProducts()\n        {\n            // Here we init the TSE in Cloud SDK\n            // The Access Token is retrieved using the "GetToken" method\n            Configuration config = new Configuration();\n            config.AccessToken = GetToken();\n\n            // In this example we\'re using the Products API\n            apiInstance = new ProductsApi(config);\n\n            // The ID of the controlled company.\n            var companyId = 2;\n\n            // Here we setup the exponential backoff config\n            var maxRetryAttempts = 5;\n            var pauseBetweenFailures =\n                Backoff.ExponentialBackoff(TimeSpan.FromSeconds(2), retryCount: maxRetryAttempts);\n\n            var retryPolicy = Policy\n                .Handle<ApiException>()\n                .WaitAndRetry(pauseBetweenFailures);\n\n            try\n            {\n                // In this example we suppose to export the data to a JSON Lines file.\n                // First, we cancel the content of the destination file\n                File.WriteAllText("products.jsonl", String.Empty);\n\n                // List Products\n                var perPage = 5;\n\n                // We perform the first request\n                ListProductsResponse result =\n                    ListProductsWithBackoff(companyId, 1, perPage, retryPolicy, apiInstance);\n                // We use the first response to extract the last page index\n                var lastPage = result.LastPage;\n                // We append the products obtained with the first request top the output file\n                // Data contains an array of products\n                AppendProductsToFile(result.Data);\n\n                // For the missing pages (we already requested the first one)\n                for (var i = 2; i <= lastPage; i++)\n                {\n                    // We require the page to the API\n                    result = ListProductsWithBackoff(companyId, i, perPage, retryPolicy, apiInstance);\n                    // And append all the retrieved products\n                    AppendProductsToFile(result.Data);\n                }\n            }\n            catch (ApiException ex)\n            {\n                Console.WriteLine("Exception when calling ProductsAPI.ListProducts: " + ex.Message);\n                Console.WriteLine("Status Code: " + ex.ErrorCode);\n                Console.WriteLine(ex.StackTrace);\n            }\n        }\n\n        // In this function we append the products in the JSON Lines file.\n        // You can replace this function to perform the operations you need.\n        // For example, you can build SQL queries or call a third-party API using the retrieved products.\n        private static void AppendProductsToFile(List<Product> products)\n        {\n            StreamWriter sw = File.AppendText("products.jsonl");\n            // For each product in the list\n            foreach (Product p in products)\n            {\n                // We write the product to the file\n                sw.WriteLine(JsonConvert.SerializeObject(p, Formatting.None) + "\\n");\n            }\n            sw.Close();\n        }\n\n        // Here we wrap the SDK method with an exponential backoff\n        // This is to manage the quota exceeded issue\n        private static ListProductsResponse ListProductsWithBackoff(int companyId, int currentPage, int perPage, Policy retryPolicy, ProductsApi apiInstance)\n        {\n            return retryPolicy.Execute(() =>\n            {\n                // The actual SDK method is executed here\n                return apiInstance.ListProducts(companyId, null, "detailed", null, currentPage, 5);\n            });\n        }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n        private static string GetToken() {\n            return "YOUR_TOKEN";\n        }\n    }\n}\n'})})}),(0,r.jsx)(a.A,{value:"go",label:"Go",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-go",children:'// The following dependencies is required\n// go get github.com/fattureincloud/fattureincloud-go-sdk/\n// go get github.com/cenkalti/backoff/v4\n\npackage main\n\nimport (\n\t"context"\n\t"encoding/json"\n\t"fmt"\n\t"os"\n\n\tbackoff "github.com/cenkalti/backoff/v4"\n\tfattureincloudapi "github.com/fattureincloud/fattureincloud-go-sdk/v2/api"\n\tfattureincloud "github.com/fattureincloud/fattureincloud-go-sdk/v2/model"\n)\n\nvar (\n\tf, _ = os.OpenFile("products.jsonl", os.O_APPEND|os.O_WRONLY, 0644)\n\t// The Access Token is retrieved using the "getToken" method\n\tauth          = context.WithValue(context.Background(), fattureincloudapi.ContextAccessToken, getToken())\n\tconfiguration = fattureincloudapi.NewConfiguration()\n\tapiClient     = fattureincloudapi.NewAPIClient(configuration)\n\tcompanyId     = int32(16) // This is the ID of the company we\'re working on\n\t// Here we define the parameters for the first request.\n\tnextPage = 1\n\tattempts = 0\n)\n\nfunc main() {\n\t// This code should be executed periodically using a cron library or job scheduler.\n\tsyncProducts()\n}\n\nfunc syncProducts() {\n\t// In this example we suppose to export the data to a JSON Lines file.\n\t// First, we cancel the content of the destination file\n\tf.Truncate(0)\n\t// Here we define the operation that retrieves the products\n\toperation := func() error {\n\t\tattempts++\n\t\tfmt.Printf("Attempt: %d\\n", attempts)\n\t\t// In this example we\'re using the Products API\n\t\t// Here we execute the actual SDK method\n\t\tresp, _, err := apiClient.ProductsAPI.ListProducts(auth, companyId).Page(int32(nextPage)).PerPage(5).Execute()\n\t\tif resp != nil {\n\t\t\t// We check if there are other pages to retrieve\n\t\t\tif resp.NextPageUrl.Get() == nil {\n\t\t\t\tnextPage = 0\n\t\t\t} else {\n\t\t\t\tnextPage++\n\t\t\t}\n\t\t\t// We write the products of this page to the file\n\t\t\t// "data" contains an array of products\n\t\t\tappendProductsToFile(resp.Data)\n\t\t}\n\t\treturn err\n\t}\n\t// For all the pages\n\tfor nextPage != 0 {\n\t\tattempts = 0\n\t\t// We call the operation function using Exponential Backoff\n\t\terr := backoff.Retry(operation, backoff.NewExponentialBackOff())\n\t\tif err != nil {\n\t\t\tfmt.Fprintf(os.Stderr, "Error %v\\n", err)\n\t\t\treturn\n\t\t}\n\t}\n\tf.Close()\n\tfmt.Println("products succesfully retrieved and saved in ./products.jsonl")\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunc appendProductsToFile(products []fattureincloud.Product) {\n\t// For each product in the array\n\tfor _, element := range products {\n\t\t// We obtain the related JSON and append it to the file as single line\n\t\tjsonStr, _ := json.Marshal(element)\n\t\tf.WriteString(string(jsonStr) + "\\n")\n\t}\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunc getToken() string {\n\treturn "YOUR_TOKEN"\n}\n'})})}),(0,r.jsx)(a.A,{value:"java",label:"Java",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'import com.google.gson.Gson;\nimport io.github.resilience4j.core.IntervalFunction;\nimport io.github.resilience4j.retry.Retry;\nimport io.github.resilience4j.retry.RetryConfig;\nimport io.github.resilience4j.retry.RetryRegistry;\nimport io.vavr.CheckedFunction0;\nimport it.fattureincloud.sdk.ApiClient;\nimport it.fattureincloud.sdk.ApiException;\nimport it.fattureincloud.sdk.Configuration;\nimport it.fattureincloud.sdk.api.ProductsApi;\nimport it.fattureincloud.sdk.auth.OAuth;\nimport it.fattureincloud.sdk.model.ListProductsResponse;\nimport it.fattureincloud.sdk.model.Product;\n\nimport java.io.IOException;\nimport java.nio.file.Files;\nimport java.nio.file.Paths;\nimport java.nio.file.StandardOpenOption;\nimport java.util.List;\n\npublic class Application {\n    public static void main(String[] args) throws Throwable {\n        // This code should be executed periodically using a cron library or job scheduler.\n        // For example: http://www.quartz-scheduler.org/\n        syncProducts();\n    }\n\n    static void syncProducts() throws Throwable {\n\n        // Here we init the TSE in Cloud SDK\n        ApiClient defaultClient = Configuration.getDefaultApiClient();\n\n        // The Access Token is retrieved using the "getToken" method\n        OAuth OAuth2AuthenticationCodeFlow =\n            (OAuth) defaultClient.getAuthentication("OAuth2AuthenticationCodeFlow");\n        OAuth2AuthenticationCodeFlow.setAccessToken(getToken());\n\n        // In this example we\'re using the Products API\n        ProductsApi apiInstance = new ProductsApi(defaultClient);\n\n        // The ID of the controlled company.\n        int companyId = 2;\n\n        // Here we setup the exponential backoff config\n        RetryConfig config = RetryConfig.custom()\n                .maxAttempts(10)\n                .retryExceptions(ApiException.class)\n                .intervalFunction(IntervalFunction.ofExponentialBackoff(1000, 2))\n                .build();\n\n        RetryRegistry registry = RetryRegistry.of(config);\n        Retry retry = registry.retry("listProducts", config);\n\n        Retry.EventPublisher publisher = retry.getEventPublisher();\n        publisher.onRetry(event -> System.out.println(event.toString()));\n\n        // In this example we suppose to export the data to a JSON Lines file.\n        // First, we cancel the content of the destination file\n        Files.write(Paths.get("products.jsonl"), ("").getBytes(),\n            StandardOpenOption.CREATE, StandardOpenOption.TRUNCATE_EXISTING);\n\n        // List Products\n        int perPage = 5;\n\n        // We perform the first request\n        ListProductsResponse result = listProductsWithBackoff(companyId, 1, perPage, retry, apiInstance);\n\n        // We use the first response to extract the last page index\n        int lastPage = result.getLastPage();\n\n        // We append the products obtained with the first request top the output file\n        // Data contains an array of products\n        appendProductsToFile(result.getData());\n\n        // For the missing pages (we already requested the first one)\n        for (int i = 2; i <= lastPage; i++)\n        {\n            // We require the page to the API\n            result = listProductsWithBackoff(companyId, i, perPage, retry, apiInstance);\n            // And append all the retrieved products\n            appendProductsToFile(result.getData());\n\n        }\n    }\n\n    // Here we wrap the SDK method with an exponential backoff\n    // This is to manage the quota exceeded issue\n    static ListProductsResponse listProductsWithBackoff(int companyId, int currentPage, int perPage,\n            Retry retry, ProductsApi apiInstance) throws Throwable {\n        CheckedFunction0<ListProductsResponse> retryingListSuppliers =\n                Retry.decorateCheckedSupplier(retry,\n                        () -> apiInstance.listProducts(companyId, null, "detailed", null, currentPage, 5));\n        return retryingListSuppliers.apply();\n    }\n\n    static void appendProductsToFile(List<Product> products) throws IOException {\n        for (Product product : products) {\n            String p = new Gson().toJson(product);\n            Files.write(Paths.get("products.jsonl"), (p + System.lineSeparator()).getBytes(),\n                StandardOpenOption.CREATE, StandardOpenOption.APPEND);\n        }\n    }\n\n        // This is just a mock: this function should contain the code to retrieve the Access Token\n    static String getToken() {\n        return "YOUR_TOKEN";\n    }\n}\n'})})}),(0,r.jsx)(a.A,{value:"js",label:"JavaScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:'// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-js-sdk\n\nconst fs = require("fs");\nconst fattureInCloudSdk = require("@fattureincloud/fattureincloud-js-sdk");\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the "getToken" method\nvar defaultClient = fattureInCloudSdk.ApiClient.instance;\nvar OAuth2AuthenticationCodeFlow =\n  defaultClient.authentications["OAuth2AuthenticationCodeFlow"];\nOAuth2AuthenticationCodeFlow.accessToken = getToken();\n\n// In this example we\'re using the Products API\nvar productsApiInstance = new fattureInCloudSdk.ProductsApi();\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) => console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate("./products.jsonl", (err) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let opts = {\n    fields: null,\n    fieldset: "detailed",\n    sort: null,\n    page: 1, // We\'re trying to obtain the first page\n    perPage: 5, // Every page will contain at most 5 products\n  };\n  let companyId = 2; // This is the ID of the company we\'re working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, opts);\n    // We recover the last page index\n    let lastPage = result["last_page"];\n    // We write the products of this page to the file\n    // "data" contains an array of products\n    await appendProductsToFile(result["data"]);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i <= lastPage; i++) {\n      // We update the page index\n      opts["page"] = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, opts);\n      // And we write the products to the file\n      await appendProductsToFile(result["data"]);\n    }\n    console.log("products succesfully retrieved and saved in ./products.jsonl");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nasync function appendProductsToFile(products) {\n  // For each product in the array\n  for (i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync(\n      "./products.jsonl",\n      JSON.stringify(product) + "\\n",\n      (err) => {\n        if (err) {\n          console.error(err);\n          return;\n        }\n      }\n    );\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId, opts) {\n  var count = 0;\n  const delay = (retryCount) =>\n    new Promise((resolve) => setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd = async (retryCount = 0, lastError = null) => {\n    if (retryCount > 20) throw new Error(lastError);\n    try {\n      console.log("attempt:", count++, "wait:", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await productsApiInstance.listProducts(companyId, opts);\n    } catch (e) {\n      await delay(retryCount);\n      return getProd(retryCount + 1, e);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return "YOUR_TOKEN";\n}\n'})})}),(0,r.jsx)(a.A,{value:"php",label:"PHP",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-php",children:'<?php\nrequire("vendor/autoload.php");\n// The following dependencies are required\n// composer require stechstudio/backoff\n// composer require fattureincloud/fattureincloud-php-sdk\n\nuse FattureInCloud\\Api\\ProductsApi;\nuse FattureInCloud\\Configuration;\nuse GuzzleHttp\\Client;\nuse STS\\Backoff\\Backoff;\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://github.com/Cron/Cron\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the "getToken" method\n$config = Configuration::getDefaultConfiguration()->setAccessToken(getToken());\n// In this example we\'re using the Products API\n$productsApiInstance = new ProductsApi(\n    new Client(),\n    $config\n);\n\n// In this example we suppose to export the data to a JSON Lines file.\n// First, we cancel the content of the destination file\nfile_put_contents("./products.jsonl", "");\n\n// This is the ID of the company we\'re currently managing\n$companyId = 2;\n// We require the first page using the ListProducts method\n$result = listProductsWithBackoff($productsApiInstance, $companyId, 1);\n// We extract the index of the last page from the first response\n$lastPage = $result["last_page"];\n// We append all the products to the destination file\n// "data" contains an array of products\nappendProductsToFile($result["data"]);\n\n// For all the missing pages (we already have the first one)\nfor ($i = 2; $i <= $lastPage; $i++) {\n    // We require the page at the selected index to the API\n    $result = listProductsWithBackoff($productsApiInstance, $companyId, $i);\n    // We append this page products to the file\n    appendProductsToFile($result["data"]);\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nfunction appendProductsToFile($products)\n{\n    // For each product in the array\n    foreach ($products as $product) {\n        // We encode it to a JSON string and append it to the file as a single line\n        file_put_contents("products.jsonl", json_encode($product) . "\\n", FILE_APPEND);\n    }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nfunction listProductsWithBackoff($productsApiInstance, $companyId, $currentPage): Object\n{\n    $backoff = new Backoff(100, \'exponential\', 300000, true);\n    return $backoff->run(function () use ($productsApiInstance, $companyId, $currentPage) {\n        try {\n            // The actual SDK method is executed here\n            $result = $productsApiInstance->listProducts($companyId, null, "detailed", null, $currentPage, 5);\n        } catch (Exception $e) {\n            var_dump($e);\n        }\n        return $result;\n    });\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken(): String {\n  return "YOUR_TOKEN"\n}\n'})})}),(0,r.jsx)(a.A,{value:"py",label:"Python",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-py",children:'# The following dependencies are required\n# pip install backoff\n# pip install fattureincloud-python-sdk\nimport fattureincloud_python_sdk\nfrom fattureincloud_python_sdk.api import products_api\nfrom fattureincloud_python_sdk.exceptions import ApiException\nimport backoff\n# import collections #needed if you are using python > 3.10\n# collections.Callable = collections.abc.Callable #needed if you are using python > 3.10\n\n# Here we setup the exponential backoff config\n@backoff.on_exception(backoff.expo, ApiException, max_tries=10)\ndef list_products_with_backoff(products_api_instance, company_id, current_page, per_page):\n    return products_api_instance.list_products(company_id, page=current_page, per_page=per_page)\n\n# In this function we append the products in the JSON Lines file.\n# You can replace this function to perform the operations you need.\n# For example, you can build SQL queries or call a third-party API using the retrieved products.\ndef append_products_to_page(products):\n    # For each product in the list\n    for p in products:\n        f = open("products.jsonl", "a")\n        # We write the product to the file\n        f.write(str(p).replace("\\n", ""))\n        f.write("\\n")\n        f.close()\n\ndef get_token():\n    return "YOUR_TOKEN"\n\ndef sync_products():\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the "GetToken" method\n    configuration = fattureincloud_python_sdk.Configuration()\n    configuration.access_token = get_token()\n    configuration.retries = 0 # Needed to implement custom backoff\n    # The ID of the controlled company.\n    company_id = 2\n    current_page = 1\n    per_page = 5\n\n    with fattureincloud_python_sdk.ApiClient(configuration) as api_client:\n        # In this example we\'re using the Products API\n        products_api_instance = products_api.ProductsApi(api_client)\n\n        # We perform the first request\n        result = list_products_with_backoff(products_api_instance, company_id, current_page, per_page)\n        last_page = result.last_page\n\n        # We append the products obtained with the first request to the output file\n        # Data contains an array of products\n        append_products_to_page(result.data)\n\n        # In this example we suppose to export the data to a JSON Lines file.\n        # First, we cancel the content of the destination file\n        file = open("products.jsonl","r+")\n        file.truncate(0)\n        file.close()\n\n        # For the missing pages (we already requested the first one)\n        for x in range(2, last_page):\n            # We require the page to the API\n            result = list_products_with_backoff(products_api_instance, company_id, x, per_page)\n            # And append all the retrieved products\n            append_products_to_page(result.data)\n\n# This code should be executed periodically using a cron library or job scheduler.\nsync_products()\n'})})}),(0,r.jsx)(a.A,{value:"rb",label:"Ruby",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-rb",children:"# The following dependency is required\n# gem install fattureincloud_ruby_sdk\n\nrequire 'fattureincloud_ruby_sdk'\nrequire 'json'\n\ndef main()\n    FattureInCloud_Ruby_Sdk.configure do |config|\n    # Here we init the TSE in Cloud SDK\n    # The Access Token is retrieved using the \"get_token\" method\n    config.access_token = get_token()\n    end\n\n    # In this example we're using the Products API\n    products_api_instance = FattureInCloud_Ruby_Sdk::ProductsAPI.new\n    retries = 0\n    max_retries = 20\n\n    # This is the ID of the company we're working on\n    company_id = 2\n    # Here we define the parameters for the first request.\n    opts = {\n        fields: nil,\n        fieldset: \"detailed\",\n        sort: nil,\n        page: 1, # We're trying to obtain the first page\n        per_page: 5 # Every page will contain at most 5 products\n    }\n    actual_page = 2\n\n    result = list_products_with_backoff(company_id, opts, products_api_instance)\n    last_page = result.last_page\n\n    # In this example we suppose to export the data to a JSON Lines file.\n    # First, we cancel the content of the destination file\n    File.delete('./products.jsonl') if File.exist?('./products.jsonl')\n    append_products_to_file(result.data)\n\n    while actual_page <= last_page do\n        opts[:page] = actual_page\n        res = list_products_with_backoff(company_id, opts, products_api_instance)\n        append_products_to_file(res.data)\n        actual_page += 1\n    end\nend\n\ndef list_products_with_backoff(company_id, opts, products_api_instance)\n    retries = 0\n    begin\n        puts \"attempt: #{retries}\\n\"\n        products = products_api_instance.list_products(company_id, opts)\n        return products\n    rescue FattureInCloud_Ruby_Sdk::ApiError => e\n        if retries <= max_retries\n            retries += 1\n            sleep 2 ** retries\n            retry\n        else\n            raise \"Giving up on the server after #{retries} retries. Got error: #{e.message}\"\n        end\n    end\nend\n\n\ndef append_products_to_file(products)\n    for product in products\n        File.write('./products.jsonl', product.to_hash.to_json + \"\\n\", mode: 'a')\n    end\nend\n\ndef get_token()\n  return \"YOUR_TOKEN\"\nend\n\n# This code should be executed periodically using a cron library or job scheduler.\nmain()\n"})})}),(0,r.jsx)(a.A,{value:"ts",label:"TypeScript",children:(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-ts",children:'// The following dependency is required\n// yarn add @fattureincloud/fattureincloud-ts-sdk\n\nimport fs from "fs";\nimport { Product } from "@fattureincloud/fattureincloud-ts-sdk";\n\n// Here we init the TSE in Cloud SDK\n// The Access Token is retrieved using the "getToken" method\nimport {\n  Configuration,\n  ProductsApi,\n} from "@fattureincloud/fattureincloud-ts-sdk";\n\nconst apiConfig = new Configuration({\n  accessToken: getToken(),\n});\n\n// In this example we\'re using the Products API\nvar productsApiInstance = new ProductsApi(apiConfig);\n\n// This code should be executed periodically using a cron library or job scheduler.\n// For example: https://www.npmjs.com/package/node-cron\nmain()\n  .then()\n  .catch((err) => console.error(err));\n\nasync function main() {\n  // In this example we suppose to export the data to a JSON Lines file.\n  // First, we cancel the content of the destination file\n  fs.truncate("./products.jsonl", (err) => {\n    if (err) {\n      console.error(err);\n      return;\n    }\n  });\n\n  // Here we define the parameters for the first request.\n  let page = 1;\n\n  let companyId = 16; // This is the ID of the company we\'re working on\n\n  try {\n    // We perform the first request\n    let result = await listProductsWithBackoff(companyId, page);\n    // We recover the last page index\n    let lastPage = result["last_page"];\n    // We write the products of this page to the file\n    // "data" contains an array of products\n    await appendProductsToFile(result.data);\n\n    // For all the remaining pages (we already have the first one)\n    for (var i = 2; i <= lastPage; i++) {\n      // We update the page index\n      page = i;\n      // We require the page at the selected index\n      result = await listProductsWithBackoff(companyId, page);\n      // And we write the products to the file\n      await appendProductsToFile(result.data);\n    }\n    console.log("products succesfully retrieved and saved in ./products.jsonl");\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// In this function we append the products in the JSON Lines file.\n// You can replace this function to perform the operations you need.\n// For example, you can build SQL queries or call a third-party API using the retrieved products.\nasync function appendProductsToFile(products: Array<Product>) {\n  // For each product in the array\n  for (var i in products) {\n    let product = products[i];\n    // We obtain the related JSON and append it to the file as single line\n    fs.appendFileSync("./products.jsonl", JSON.stringify(product) + "\\n");\n  }\n}\n\n// Here we wrap the SDK method with an exponential backoff\n// This is to manage the quota exceeded issue\nasync function listProductsWithBackoff(companyId: number, page: number) {\n  var count = 0;\n  const delay = (retryCount: number) =>\n    new Promise((resolve) => setTimeout(resolve, 2 ** retryCount * 1000));\n  const getProd: any = async (retryCount = 0, lastError?: string) => {\n    if (retryCount > 20) throw new Error(lastError);\n    try {\n      console.log("attempt:", count++, "wait:", 2 ** retryCount * 1000);\n      // The actual SDK method is executed here\n      return await (\n        await productsApiInstance.listProducts(\n          companyId,\n          undefined,\n          "detailed",\n          undefined,\n          page\n        )\n      ).data;\n    } catch (e: any) {\n      await delay(retryCount);\n      return getProd(++retryCount, e.message);\n    }\n  };\n  try {\n    var res = await getProd();\n    return res;\n  } catch (e) {\n    console.log(e);\n  }\n}\n\n// This is just a mock: this function should contain the code to retrieve the Access Token\nfunction getToken() {\n  return "YOUR_TOKEN";\n}\n'})})})]}),"\n",(0,r.jsxs)(t.h2,{id:"books-additional-resources",children:["\ud83d\udcda","\xa0 Additional resources"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Polling_(computer_science)",children:"Polling"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Exponential_backoff",children:"Exponential Backoff"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Zero-based_numbering",children:"Zero-based numbering"})}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},9365:(e,t,n)=>{n.d(t,{A:()=>a});n(6540);var r=n(4164);const o={tabItem:"tabItem_Ymn6"};var i=n(4848);function a(e){let{children:t,hidden:n,className:a}=e;return(0,i.jsx)("div",{role:"tabpanel",className:(0,r.A)(o.tabItem,a),hidden:n,children:t})}},1470:(e,t,n)=>{n.d(t,{A:()=>P});var r=n(6540),o=n(4164),i=n(3104),a=n(6347),s=n(205),c=n(7485),l=n(1682),u=n(679);function d(e){return r.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function p(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??function(e){return d(e).map((e=>{let{props:{value:t,label:n,attributes:r,default:o}}=e;return{value:t,label:n,attributes:r,default:o}}))}(n);return function(e){const t=(0,l.XI)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function h(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const o=(0,a.W6)(),i=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,c.aZ)(i),(0,r.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(o.location.search);t.set(i,e),o.replace({...o.location,search:t.toString()})}),[i,o])]}function g(e){const{defaultValue:t,queryString:n=!1,groupId:o}=e,i=p(e),[a,c]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!h({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const r=n.find((e=>e.default))??n[0];if(!r)throw new Error("Unexpected error: 0 tabValues");return r.value}({defaultValue:t,tabValues:i}))),[l,d]=f({queryString:n,groupId:o}),[g,m]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[o,i]=(0,u.Dv)(n);return[o,(0,r.useCallback)((e=>{n&&i.set(e)}),[n,i])]}({groupId:o}),y=(()=>{const e=l??g;return h({value:e,tabValues:i})?e:null})();(0,s.A)((()=>{y&&c(y)}),[y]);return{selectedValue:a,selectValue:(0,r.useCallback)((e=>{if(!h({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);c(e),d(e),m(e)}),[d,m,i]),tabValues:i}}var m=n(2303);const y={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var x=n(4848);function b(e){let{className:t,block:n,selectedValue:r,selectValue:a,tabValues:s}=e;const c=[],{blockElementScrollPositionUntilNextRender:l}=(0,i.a_)(),u=e=>{const t=e.currentTarget,n=c.indexOf(t),o=s[n].value;o!==r&&(l(t),a(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}t?.focus()};return(0,x.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.A)("tabs",{"tabs--block":n},t),children:s.map((e=>{let{value:t,label:n,attributes:i}=e;return(0,x.jsx)("li",{role:"tab",tabIndex:r===t?0:-1,"aria-selected":r===t,ref:e=>c.push(e),onKeyDown:d,onClick:u,...i,className:(0,o.A)("tabs__item",y.tabItem,i?.className,{"tabs__item--active":r===t}),children:n??t},t)}))})}function w(e){let{lazy:t,children:n,selectedValue:i}=e;const a=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=a.find((e=>e.props.value===i));return e?(0,r.cloneElement)(e,{className:(0,o.A)("margin-top--md",e.props.className)}):null}return(0,x.jsx)("div",{className:"margin-top--md",children:a.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==i})))})}function k(e){const t=g(e);return(0,x.jsxs)("div",{className:(0,o.A)("tabs-container",y.tabList),children:[(0,x.jsx)(b,{...t,...e}),(0,x.jsx)(w,{...t,...e})]})}function P(e){const t=(0,m.A)();return(0,x.jsx)(k,{...e,children:d(e.children)},String(t))}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var r=n(6540);const o={},i=r.createContext(o);function a(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);